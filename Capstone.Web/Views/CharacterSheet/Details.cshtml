@using Capstone.Core.Models
@using Capstone.Infrastructure.Models
@using Microsoft.AspNetCore.Identity
@model Capstone.Core.Models.CharacterSheet
@inject UserManager<CapstoneUser> _UserManager

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>CharacterSheet</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Level)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Level)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Experience)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Experience)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ExperienceToNextLevel)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ExperienceToNextLevel)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Background)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Background)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Languages)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Languages)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Age)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Age)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Height)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Height)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Weight)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Weight)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Eyes)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Eyes)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Hair)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Hair)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Proficiency)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Proficiency)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Inspiration)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Inspiration)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PassiveWisdom)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PassiveWisdom)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.WeightCarried)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.WeightCarried)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.IsEncumbered)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.IsEncumbered)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.IsHeavilyEncumbered)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.IsHeavilyEncumbered)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MoveWeight)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MoveWeight)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ArmorClass)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ArmorClass)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DexArmorModifier)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DexArmorModifier)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Armor)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Armor)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Shield)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Shield)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MiscArmorModifier)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MiscArmorModifier)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.InitiativeModifier)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.InitiativeModifier)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MaxSpeed)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MaxSpeed)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentSpeed)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CurrentSpeed)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DeathSavingThrowSuccesses)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DeathSavingThrowSuccesses)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DeathSavingThrowFailures)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DeathSavingThrowFailures)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Exhaustion)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Exhaustion)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalHitDice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalHitDice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CurrentHitDice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CurrentHitDice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SpellCasting)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SpellCasting)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SpellSave)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SpellSave)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SpellAttackBonus)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SpellAttackBonus)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Equipment)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Equipment)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CopperPiece)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CopperPiece)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SilverPiece)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SilverPiece)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ElectrumPiece)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ElectrumPiece)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.GoldPiece)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.GoldPiece)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PlatinumPiece)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PlatinumPiece)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Traits)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Traits)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CreationTime)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreationTime)
        </dd>
    </dl>
</div>
<div>
    @if (_UserManager.GetUserId(User) == Model.Author.Id)
    {

        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> <span>|</span>
    }
    <a asp-action="Index">Back to List</a>
</div>
<button type="button" id="js-comment" class="js_comment" display="block">Comment</button>
<div id="js-comment-edit-div" display="none">
    <textarea id="js-comment-content" rows="4"/>
    <button type="button" id="js-cancel-comment" class="js_comment">Cancel</button>
    <button type="button" id="js-create-comment">Comment</button>
</div>
<div id="comments">
    @{
        async Task GetComments(Comment comment, int depth)
        {
            int em = Math.Min(depth, 2) * 4;
            string margin = $"margin-left: {em}em";
            <div id="@comment.Id" style=@margin>
                <b>{comment.Author.Name}</b><br />"
                <p>
                    @comment.Substance
                </p>
            @if (_UserManager.GetUserId(User) == comment.Author.Id)
            {
                <a class="js-edit" value="@comment.Id">Edit</a><span>|</span>
            }
            @if (_UserManager.GetUserId(User) == comment.Author.Id ||
                (await _UserManager.GetRolesAsync(await _UserManager.GetUserAsync(User))).Contains("Moderator"))
            {
                <a class="js-delete" value="@comment.Id">Delete</a>
            }


            @foreach (Comment c in comment.Comments)
            {
                await GetComments(c, depth + 1);
            }
            </div>
            @if (_UserManager.GetUserId(User) == comment.Author.Id)
            {
                <div id="edit-@comment.Id" display="hidden">
                    <textarea id="js-edit-content-@comment.Id" rows="4"/>
                    <button class="js_commit_edit" value=@comment.Id>Edit</button>
                </div>
            }
        }
        for (int i = 0; i < Model.Comments.Count(); i++)
        {
            await GetComments(((List<Comment>)Model.Comments)[i], 0);
        }
    }
    </div>
<script>
    let toggleCommentCreator = function ()
    {
        if ($("#js-comment-edit-div").attr("display") == "none")
            $("#js-comment-edit-div").attr("display", "block");
        else
            $("#js-comment-edit-div").attr("display", "none")

        if ($("#js-comment").attr("display") == "none")
            $("#js-comment").attr("display", "block")
        else
            $("#js-comment").attr("display", "none")
    }

    let postComment = function ()
    {
        $.post("/api/Comments",
            {
                parentId: @Model.Id,
                content: $("#js-comment-content").val()
            }
        );
    }

    let updateComment = function (commentId: string)
    {
        $.ajax(url: `/api/Comments/${commentId}`,
            type: "PUT",
            data: JSON.stringify({
                content: $(`#js-edit-content-${commentId}`).val()
            });
        );
    }

    let toggleEdit = function (commentId: string)
    {
        if ($(`#edit-${commentId}`).attr("display") == "hidden") {
            $(`#edit-${commentId}`).attr("display", "block")
        }
        else
        {
            $(`#edit-${commentId}`).attr("display", "hidden")
        }

        if ($(`#${commentId}`).attr("display") == "hidden") {
            $(`#${commentId}`).attr("display", "block")
        }
        else {
            $(`#${commentId}`).attr("display", "hidden")
        }
    }

    let deleteComment = function (commentId: string)
    {
        $.ajax(url: `/api/comments/${commentId}`,
            type: "DELETE");
        $(`#${commentId}`).parent().remove(`#${commentId}`);
    }

    $(document).ready(function ()
    {
        $(".js_comment").click(toggleCommentCreator);
        $("#js-create-comment").click(postComment);
        $(".js_commit_edit").click{function(e) { updateComment(e.val());});
        $(".js-edit").click(function (e) { toggleEdit(e.val()); });
        $(".js-delete").click(function (e) { deleteComment(e.val()); });
    });
</script>