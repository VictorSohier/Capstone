// <auto-generated />
using System;
using Capstone.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capstone.Infrastructure.Migrations
{
    [DbContext(typeof(CapstoneDBContext))]
    [Migration("20201015194605_fixedCharacterSheet")]
    partial class fixedCharacterSheet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capstone.Core.Enums.CombatProficiencies", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Value");

                    b.ToTable("CombatProficiencies");
                });

            modelBuilder.Entity("Capstone.Core.Models.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Capstone.Core.Models.Commentable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId1");

                    b.ToTable("Commentable");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Commentable");
                });

            modelBuilder.Entity("Capstone.Core.Models.Value_Models.Stat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DerivativeStatsXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stat");
                });

            modelBuilder.Entity("Capstone.Core.Models.Value_Models.Weapon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterSheetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Cost")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CritMultiplier")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Damage")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Range")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Weight")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterSheetId");

                    b.ToTable("Weapon");
                });

            modelBuilder.Entity("Capstone.Infrastructure.Models.CapstoneRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Capstone.Infrastructure.Models.CapstoneUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthoredItemsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AuthoredItemsId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Capstone.Core.CharacterSheet", b =>
                {
                    b.HasBaseType("Capstone.Core.Models.Commentable");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("Alignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<string>("ArmorClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharismaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Class")
                        .HasColumnType("int");

                    b.Property<string>("ConstitutionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("CopperPiece")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrentHitDice")
                        .HasColumnType("tinyint");

                    b.Property<double>("CurrentSpeed")
                        .HasColumnType("float");

                    b.Property<byte>("DeathSavingThrowFailures")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DeathSavingThrowSuccesses")
                        .HasColumnType("tinyint");

                    b.Property<int>("DexArmorModifier")
                        .HasColumnType("int");

                    b.Property<string>("DexterityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("ElectrumPiece")
                        .HasColumnType("tinyint");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Exhaustion")
                        .HasColumnType("tinyint");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<long>("ExperienceToNextLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("Eyes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<byte>("GoldPiece")
                        .HasColumnType("tinyint");

                    b.Property<string>("Hair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitiativeModifier")
                        .HasColumnType("int");

                    b.Property<string>("Inspiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntelligenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("float");

                    b.Property<int>("MiscArmorModifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassiveWisdom")
                        .HasColumnType("int");

                    b.Property<long>("PlatinumPiece")
                        .HasColumnType("bigint");

                    b.Property<string>("Proficiency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shield")
                        .HasColumnType("int");

                    b.Property<byte>("SilverPiece")
                        .HasColumnType("tinyint");

                    b.Property<int>("SpellAttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("SpellCasting")
                        .HasColumnType("int");

                    b.Property<int>("SpellSave")
                        .HasColumnType("int");

                    b.Property<string>("StrengthId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("TotalHitDice")
                        .HasColumnType("tinyint");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeaponAndArmorProficiencies")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WeightCarried")
                        .HasColumnType("float");

                    b.Property<string>("WisdomId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CharismaId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("WisdomId");

                    b.HasDiscriminator().HasValue("CharacterSheet");
                });

            modelBuilder.Entity("Capstone.Core.Models.Comment", b =>
                {
                    b.HasBaseType("Capstone.Core.Models.Commentable");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnName("Comment_AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Substance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentableId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("Capstone.Core.Models.Commentable", b =>
                {
                    b.HasOne("Capstone.Core.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.Core.Models.Value_Models.Weapon", b =>
                {
                    b.HasOne("Capstone.Core.CharacterSheet", null)
                        .WithMany("Weapons")
                        .HasForeignKey("CharacterSheetId");
                });

            modelBuilder.Entity("Capstone.Infrastructure.Models.CapstoneUser", b =>
                {
                    b.HasOne("Capstone.Core.Models.Author", "AuthoredItems")
                        .WithMany()
                        .HasForeignKey("AuthoredItemsId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Capstone.Infrastructure.Models.CapstoneRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Capstone.Infrastructure.Models.CapstoneUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Capstone.Infrastructure.Models.CapstoneUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Capstone.Infrastructure.Models.CapstoneRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Infrastructure.Models.CapstoneUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Capstone.Infrastructure.Models.CapstoneUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.Core.CharacterSheet", b =>
                {
                    b.HasOne("Capstone.Core.Models.Author", null)
                        .WithMany("CharacterSheets")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexterityId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthId");

                    b.HasOne("Capstone.Core.Models.Value_Models.Stat", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomId");
                });

            modelBuilder.Entity("Capstone.Core.Models.Comment", b =>
                {
                    b.HasOne("Capstone.Core.Models.Author", null)
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Core.Models.Commentable", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentableId");

                    b.HasOne("Capstone.Core.Models.Commentable", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
